// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

enum Role {
  GUEST
  ADMIN
  OTHER
}

enum Group {
  DAY
  EVENING
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role      @default(OTHER)
  Rsvp           Rsvp?
  group          Group     @default(DAY)
  receivedEmails Email[]   @relation("EmailToUser")
  guestNames     String[]  @default([])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// RSVP

model Rsvp {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dietaryRequirements    String?
  extraInfo              String?
  attendingGuestNames    String[] @default([])
  nonAttendingGuestNames String[] @default([])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// Content

model Content {
  id            String         @id @default(cuid())
  slug          String         @unique
  title         String
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  protected     Boolean
  ContentPieces ContentPiece[]
  group         Group?
}

enum Layout {
  TEXT
  IMAGE_FIRST
  IMAGE_LAST
}

model ContentPiece {
  id        String   @id @default(cuid())
  html      String
  order     Int
  contentId String
  layout    Layout
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?
  image     Image?   @relation(fields: [imageId], references: [id])
  content   Content  @relation(fields: [contentId], references: [id])
  group     Group?
}

model Image {
  id            String         @id @default(cuid())
  url           String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ContentPieces ContentPiece[]
}

// Email
model Email {
  id        String    @id @default(cuid())
  from      String
  to        User[]    @relation("EmailToUser")
  subject   String
  body      String
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
